//- The maximum difficulty of an exercise.
-const MAXIMUM_DIFFICULTY = 5.0;

//- Adds a star rating from 0.0 to MAXIMUM_DIFFICULTY. Supports half stars.
    @param {Number} difficulty the difficulty from 0 to 5 to display.
mixin difficulty(difficulty)
    if difficulty < 0 || difficulty > 5
        -
            throw new Error(
                "Invalid difficulty " 
                + difficulty 
                + ", must be between 0 and " 
                + MAXIMUM_DIFFICULTY 
                + " inclusively"
            );
    -difficulty = difficulty ? 2 * difficulty : 0;
    -let emptyStarsCount = 2 * MAXIMUM_DIFFICULTY - difficulty;
    while difficulty >= 2
        i.fa.fa-fw.fa-star
        -difficulty -= 2;
    if difficulty > 0
        i.fa.fa-fw.fa-star-half-o
    if emptyStarsCount % 2 != 0
        -emptyStarsCount--;
    while emptyStarsCount > 0
        i.fa.fa-fw.fa-star-o
        -emptyStarsCount -= 2;

//- Counter variables.
-var definitionNo = 0;
-var exampleNo = 0;
-var theoremNo = 0;
-var exerciseNo = 0;
-var reminderNo = 0;

//- Default counter values for proofs and solutions.
-var proofNo = 0;
-var solutionNo = 0;

//-Retrieve the appropriate locale variables
-
    let modules;
    if (Current.locale()) {
        let localeVariables = Current.locale().variables;
        modules = localeVariables.modules;
    }

//- Adds a module structure.
    @param {String} title the title of the module.
    @param {String} moduleType the type of the module.
    @param {String} localizedType the localized module type name.
    @param {Number} counter the number of the module.
    @param {Object} argument the optional argument object of the module.
mixin module(title, moduleType, localizedType, counter, argument = {expanded: true})
    -if (argument.expanded === undefined) {argument.expanded = true;}
    aside.module(
        class!=moduleType id!=moduleType + '-' + counter
    )&attributes(attributes)
        header
            -
                var moduleLevel = currentHeadlineLevel >= 6 ? 
                    6 : currentHeadlineLevel + 1;
            -var moduleTitle = localizedType + ' ' + counter;
            if (title)
                -moduleTitle += ": " + title;
            +moduleHeadline(moduleLevel, moduleTitle)
            if (argument.difficulty) 
                +difficulty(argument.difficulty)
            -var togglerIcon = argument.expanded ? "fa-caret-up" : "fa-caret-down";
            i.fa.fa-fw.toggler(class!=togglerIcon)
        .content(aria-expanded="#{argument.expanded}" role="complementary")
            block
        if argument.footer
            footer!=argument.footer

//- Adds a module headline.
    @param {Number} the level of the headline.
    @param {String} headline the headline to add.
mixin moduleHeadline(level, headline)
    case level
        when 2
            h2!=headline
        when 3
            h3!=headline
        when 4
            h4!=headline
        when 5
            h5!=headline
        when 6
            h6!=headline
        default
            -
                throw new Error(
                    "Invalid level " + level + " for headline " + headline
                );

//- Adds a numbered definition block.
    @param {String} title the title of the definition.
    Usage:
    +definition()
        p A function is ...
mixin definition(title)
    -definitionNo++
    +module(title, "definition", modules.definition, definitionNo)
        block

//- Adds a reference to a definition in the current document.
    The step is relative to the declaration of the reference, meaning that
    a step of 0 is the latest module declared and a step of 1 is the 
    following module.
    @param {Number} step the step back or forward of this reference relative to
    the current definition.
mixin refDefinition(step)
    -let reference = definitionNo + step;
    a(href!='#' + "definition-" + reference)
        block
           
//- Adds a numbered example block.
    @param {String} title the title of the example.
    Usage:
    +example()
        p Given the values of ...        
mixin example(title)
    -exampleNo++
    +module(title, "example", modules.example, exampleNo)
        block


//- Adds a reference to an example in the current document.
    The step is relative to the declaration of the reference, meaning that
    a step of 0 is the latest module declared and a step of 1 is the 
    following module.
    @param {Number} step the step back or forward of this reference relative to
    the current example.
mixin refExample(step)
    -let reference = exampleNo + step;
    a(href!='#' + "example-" + reference)
        block

//- Adds a numbered theorem block.
    @param {String} title the title of the theorem.
    Usage:
    +theorem()
        p Given the values of ...
mixin theorem(title)
    -proofNo = 0
    -theoremNo++
    +module(title, "theorem", modules.theorem, theoremNo)
        block

//- Adds a reference to a theorem in the current document.
    The step is relative to the declaration of the reference, meaning that
    a step of 0 is the latest module declared and a step of 1 is the 
    following module.
    @param {Number} step the step back or forward of this reference relative to
    the current theorem.
mixin refTheorem(step)
    -let reference = theoremNo + step;
    a(href!='#' + "theorem-" + reference)
        block

//- Adds a numbered proof block. Proofs are collapsed by default.
    Should only be featured in a theorem block.
    @param {String} title the title of the proof.
    Usage:
    +theorem()
        p ...
        +proof()
            p ... 
mixin proof(title)
    -proofNo++
    -let argument = {expanded: false};
    +module(title, "proof", modules.proof, theoremNo + '.' + proofNo, argument)
        block

//- Adds a reference to a proof in the current document.
    The step is relative to the declaration of the reference, meaning that
    a step of 0 is the latest module declared and a step of 1 is the 
    following module.
    @param {Number} step the step back or forward of this reference relative to
    the current proof.
mixin refProof(step)
    -let reference = proofNo + step;
    a(href!='#' + "proof-" + reference)
        block

//- Adds a numbered exercise block.
    @param {Number} difficulty the difficulty of the exercise on a scale from 
    0 to 5 with 0.5 steps.
    @param {String} title the title of the exercise.
    Usage:
    +exercise()
        p Solve the following ...
mixin exercise(difficulty, title)
    -solutionNo = 0
    -exerciseNo++
    -let argument = {difficulty: difficulty};
    +module(title, "exercise", modules.exercise, exerciseNo, argument)
        block

//- Adds a reference to an exercise in the current document.
    The step is relative to the declaration of the reference, meaning that
    a step of 0 is the latest module declared and a step of 1 is the 
    following module.
    @param {Number} step the step back or forward of this reference relative to
    the current exercise.
mixin refExercise(step)
    -let reference = exerciseNo + step;
    a(href!='#' + "exercise-" + reference)
        block

//- Adds a numbered solution block. Solutions are collapsed by default.
    Should only be featured in an exercise block.
    @param {String} title the title of the solution.
    Usage:
    +exercise()
        p ...
        +solution()
            p ...
mixin solution(title)
    -solutionNo++
    -let argument = {expanded: false};
    +module(title, "solution", modules.solution, solutionNo, argument)
        block

//- Adds a reference to a solution in the current document.
    The step is relative to the declaration of the reference, meaning that
    a step of 0 is the latest module declared and a step of 1 is the 
    following module.
    @param {Number} step the step back or forward of this reference relative to
    the current solution.
mixin refSolution(step)
    -let reference = solutionNo + step;
    a(href!='#' + "solution-" + reference)
        block

//- Adds a numbered reminder block.
    @param {String} title the title of the reminder.
    @param {String} linkback the link back to the article that explains the
    content of the reminder.
mixin reminder(title, linkback)
    -reminderNo++
    -
        let argument = {};
        if (linkback) {
            argument.footer = "<a class=\"external-link\" href=\"" + linkback 
            + "\" target=\"_blank\">" + modules.reminderLinkBack + "</a>";
        }
    +module(title, "reminder", modules.reminder, reminderNo, argument)
        block

//- Adds a reference to a reminder in the current document.
    The step is relative to the declaration of the reference, meaning that
    a step of 0 is the latest module declared and a step of 1 is the 
    following module.
    @param {Number} step the step back or forward of this reference relative to
    the current reminder.
mixin refReminder(step)
    -let reference = reminderNo + step;
    a(href!='#' + "reminder-" + reference)
        block