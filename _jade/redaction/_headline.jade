-var sectionIndices = [0, 0, 0, 0, 0, 0];

-var documentContents = [];


//- TODO: Refactor to a class...
-
    /**
     * Pushes a headline in the structure of the table of contents.
     * @param {Object} headline the headline to push. 
     */
    function pushHeadline(headline) {
        if (documentContents.length < 1) {
            documentContents.push(headline);
        } else if (
            headline.level === documentContents[
                documentContents.length - 1
            ].level
        ) {
            documentContents.push(headline);
        } else {
            let previousHeadline = documentContents[
                documentContents.length - 1
            ];
            addHeadline(previousHeadline, headline);
        }
    }

    /**
     * Recursively traverses the structure of the table of contents to add the 
     * headline.
     * @param {Object} previousHeadline the previous headline in the hierarchy.
     * @param {Object} headline the headline to add recursively.
     */
    function addHeadline(previousHeadline, headline) {
        if (previousHeadline.headlines.length < 1) {
            previousHeadline.headlines.push(headline);
        } else {
            let headlines = previousHeadline.headlines;
            let lastHeadline = headlines[headlines.length - 1];
            if (headline.level === lastHeadline.level) {
                headlines.push(headline);
            } else {
                addHeadline(lastHeadline, headline);
            }
        }
    }

    /**
     * Returns the localized title of the table of contents based on the 
     * locale of the current document.
     */
    function fetchTableOfContentsHeader() {
        if (Current.locale()) {
            let localeVariables = Current.locale().variables;
            return localeVariables.modules.tableOfContents;
        }
    }

    /**
     * Returns the identification number of the current article 
     */
    function articleId() {
        let articles = Current.category().articles;
        for (let i = 0; i < articles.length; i++) {
            let article = articles[i];
            if (article.slug === Current.slug()) {
                return ++i;
            }
        }
    }

    /**
     * Computes the identification string of the section given its level.
     */
    function sectionId(level) {
        sectionIndices[--level]++;
        for (let i = ++level; i < sectionIndices.length; i++) {
            sectionIndices[i] = 0;
        }
        let id = sectionIndices[0];
        let i = 1;
        while (sectionIndices[i] != 0) {
            id += '.' + sectionIndices[i];
            i++;
        }
        return id;
    }

//- Adds an anchor to the headline.
mixin heading(headline)
    if headline
        a.headline-link(
            href!='#' + Utils.slugify(headline)
        ): i.fa.fa-link
        !=headline

mixin headline(level, headline)
    case level
        when 1
            h1.heading(id!=Utils.slugify(headline)): +heading(headline)
        when 2
            h2.heading(id!=Utils.slugify(headline)): +heading(headline)
        when 3
            h3.heading(id!=Utils.slugify(headline)): +heading(headline)
        when 4
            h4.heading(id!=Utils.slugify(headline)): +heading(headline)
        when 5
            h5.heading(id!=Utils.slugify(headline)): +heading(headline)
        when 6
            h6.heading(id!=Utils.slugify(headline)): +heading(headline)
        default
            -throw new Error("Invalid level " + level + " for headline " + headline);

//- Displays and identifies a headline.
    Should not be used as an inline mixin.
    Since the headline is passed as a Javascript parameter,
    it is subject to escaped characters.
mixin h(level, headline, id)
    if level && headline
        -
            pushHeadline({
                id: Utils.slugify(headline), 
                headline: headline, 
                level: level, 
                headlines: []
            });
        if Current.isArticle()
            -sectionIndices[0] = articleId();
            section(id!=sectionId(level))
                +headline(level, headline)
                block
        else
            section(id!=id)
                +headline(level, headline)
                block
    else
        -throw new Error("Undefined headline parameters")

//- Adds the table of contents of the current document. Must be used at the
    end of all headline declarations, as the script retains the mixin call 
    order.
mixin tableOfContents() 
    if Current.locale()
        if documentContents && documentContents.length > 0
            section#table-of-contents
                nav(
                    itemscope="itemscope" 
                    itemtype="http://www.schema.org/SiteNavigationElement"
                )
                    header!=fetchTableOfContentsHeader()
                    ol: +listTableOfContents(documentContents)

//- Recursively lists the elements of the table of contents given the root from
    which to start.
mixin listTableOfContents(root)
    each content in root
        li(itemprop="name")
            a(href!='#' + content.id itemprop="url")!=content.headline
            if content.headlines && content.headlines.length > 0
                ol: +listTableOfContents(content.headlines)
